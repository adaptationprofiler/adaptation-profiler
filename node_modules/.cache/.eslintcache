[{"/Users/aross/Desktop/adaptation-profiler/src/index.js":"1","/Users/aross/Desktop/adaptation-profiler/src/App.js":"2","/Users/aross/Desktop/adaptation-profiler/src/scripts/SimulationScript.js":"3","/Users/aross/Desktop/adaptation-profiler/src/components/Graph.js":"4","/Users/aross/Desktop/adaptation-profiler/src/scripts/CSVToArray.js":"5","/Users/aross/Desktop/adaptation-profiler/src/scripts/GraphScript.js":"6"},{"size":220,"mtime":1620399824408,"results":"7","hashOfConfig":"8"},{"size":12353,"mtime":1620703348033,"results":"9","hashOfConfig":"8"},{"size":18410,"mtime":1620703346354,"results":"10","hashOfConfig":"8"},{"size":2720,"mtime":1620533790618,"results":"11","hashOfConfig":"8"},{"size":2407,"mtime":1619818109485,"results":"12","hashOfConfig":"8"},{"size":1732,"mtime":1620416182121,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"33e9x1",{"filePath":"16","messages":"17","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aross/Desktop/adaptation-profiler/src/index.js",[],"/Users/aross/Desktop/adaptation-profiler/src/App.js",["29","30","31","32","33","34","35","36","37","38","39"],"import React, { useEffect, useState, useRef } from 'react';\nimport Graph from './components/Graph';\nimport Hawaii from './images/Hawaii.png';\nimport MNIST from './config/mnist.json';\nimport ReactFlow, { Controls, Background } from 'react-flow-renderer';\nimport SimulationScript from './scripts/SimulationScript';\n\nimport { Slider, IconButton, TextField, Button, FormControlLabel, Switch, Dialog, DialogActions, DialogTitle, CircularProgress } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { withStyles } from '@material-ui/core/styles';\nimport { BsGear } from \"react-icons/bs\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PropTypes from 'prop-types';\n\nimport 'katex/dist/katex.min.css';\nimport { BlockMath } from 'react-katex';\n\nfunction App() {\n\n  let elements = [];\n  const JSONdata = MNIST;\n  const [adaptationStrategy, setAdaptationStrategy] = useState(JSONdata.adaptationStrategy[0]);\n  const [tasks, setTasks] = useState(adaptationStrategy.tasks);\n  const [knobs, setKnobs] = useState(adaptationStrategy.adaptiveVariables);\n  const [flowChart, setFlowChart] = useState([]);\n\n  const [appCompletions, setAppCompletions] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [extraData, setExtraData] = useState([])\n\n  const [LaTeXEquation1, setLaTeXEquation1] = useState(String.raw`\\mathit{if}\\ (\\mathit{s\\_off}_{n} - \\epsilon) < \\frac{1}{n}\\sum_{i=1}^{n-1} \\mathit{s\\_off}_{i}`);\n  const [LaTeXEquation2, setLaTeXEquation2] = useState(String.raw`\\mathit{if}\\ (\\mathit{s\\_off}_{n} + \\epsilon) > \\frac{1}{n}\\sum_{i=1}^{n-1} \\mathit{s\\_off}_{i}`);\n\n  const [showModal, setShowModal] = useState(false);\n  const [showLoading, setShowLoading] = useState(false);\n  const [histArraySize, setHistArraySize] = useState(0);\n  const [stepSize, setStepSize] = useState(0);\n  let adapt = false;\n\n  useEffect(() => {\n    getElements();\n    setFlowChart(elements);\n  }, [])\n\n  // Initializes and Arranges Task Map\n  const getElements = async () => {\n    let x = 150;\n    let y = 50;\n    tasks.map((item, index, array) => {\n      if (index === 0) {\n        elements.push({\n          id: index + 1,\n          //type: 'input', // input node\n          data: { label: item.taskName },\n          position: { x: x + 500, y: y },\n          sourcePosition: 'right',\n          targetPosition: 'bottom',\n          style: { backgroundColor: '#E8E8FC', borderRadius: 10, padding: 40, fontSize: 9, fontWeight: 'bold' }\n        }, {\n          id: 'arrow' + index + 1,\n          type: 'default',\n          source: index + 1,\n          target: index + 2,\n          arrowHeadType: 'arrowclosed',\n          animated: true,\n          style: { stroke: '#ffffff', strokeWidth: 3 },\n        });\n      } else if (index + 1 === tasks.length) {\n        if (x === 150) x = 400;\n        else if (x === 400) x = 150;\n        y = y + 100;\n        elements.push({\n          id: index + 1,\n          //type: 'output', // input node\n          data: { label: item.taskName },\n          position: { x: x, y: y },\n          sourcePosition: 'right',\n          targetPosition: 'top',\n          style: { backgroundColor: '#E8E8FC', borderRadius: 10, padding: 40, fontSize: 9, fontWeight: 'bold' }\n        }, {\n          id: 'arrow' + index + 1,\n          type: 'default',\n          source: index + 1,\n          target: 1,\n          arrowHeadType: 'arrowclosed',\n          animated: true,\n          style: { stroke: '#ffffff', strokeWidth: 3 },\n        });\n      } else {\n        if (x === 150) x = 400;\n        else if (x === 400) x = 150;\n        y = y + 100;\n        elements.push({\n          id: index + 1,\n          data: { label: item.taskName },\n          position: { x: x, y: y },\n          sourcePosition: 'right',\n          targetPosition: 'top',\n          style: { backgroundColor: '#E8E8FC', borderRadius: 10, padding: 40, fontSize: 9, fontWeight: 'bold' }\n        }, {\n          id: 'arrow' + index + 1,\n          type: 'default',\n          source: index + 1,\n          target: index + 2,\n          arrowHeadType: 'arrowclosed',\n          animated: true,\n          style: { stroke: '#ffffff', strokeWidth: 3 },\n        })\n      }\n    })\n  }\n\n  // Initializes Custom Sliders\n  const iOSBoxShadow = \" 0px 2px 4px 0px #000000\";\n  function ValueLabelComponent(props) {\n    const { children, open, value } = props;\n    return (\n      <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n        {children}\n      </Tooltip>\n    );\n  }\n  ValueLabelComponent.propTypes = {\n    children: PropTypes.element.isRequired,\n    open: PropTypes.bool.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n  const PrettoSlider = withStyles({\n    root: {\n      color: '#0058FF',\n      height: 8,\n    },\n    thumb: {\n      height: 24,\n      width: 24,\n      backgroundColor: '#fff',\n      border: '2px solid currentColor',\n      marginTop: -10,\n      marginLeft: -12,\n      '&:focus, &:hover, &$active': {\n        boxShadow: 'inherit',\n      },\n    },\n    active: {},\n    valueLabel: {\n      left: 'calc(-50% + 4px)',\n    },\n    track: {\n      height: 8,\n      borderRadius: 8,\n    },\n    rail: {\n      height: 8,\n      borderRadius: 8,\n      backgroundColor: \"#000000\",\n      boxShadow: iOSBoxShadow,\n    },\n  })(Slider);\n\n  // Handles AdaptUp Equation Changes\n  const handleAdaptUp = (event) => {\n    console.log(event.target.value)\n    setLaTeXEquation1(String.raw`\\mathit{if}\\ ${event.target.value}`)\n  }\n\n  // Handles AdaptDown Equation Changes\n  const handleAdaptDown = (event) => {\n    console.log(event.target.value)\n    setLaTeXEquation2(String.raw`\\mathit{if}\\ ${event.target.value}`)\n  }\n\n  // Excecutes Simulation Script\n  const executeScript = () => {\n    const equation = { adaptUp: LaTeXEquation1, adaptDown: LaTeXEquation2 }\n    setShowModal(false);\n    setShowLoading(true);\n    console.log(histArraySize)\n    console.log(stepSize)\n    console.log(adapt)\n    SimulationScript(histArraySize, stepSize, \"onTimeHistory\", adapt).then((response) => {\n      console.log(response)\n      setAppCompletions(response.appCompletions);\n      setAccuracy(response.mlAccuracy);\n      setExtraData(response.accuracyGraph);\n      setShowLoading(false);\n    })\n  }\n\n  return (\n    <>\n\n      <div style={showLoading ? { pointerEvents: \"none\", opacity: \"0.5\" } : {}}>\n\n        {/* Task Map */}\n        <div style={{ flex: 1, position: 'absolute', width: '68%', height: '70%', left: 0, top: 0, backgroundColor: '#69AA83', boxShadow: \"inset 0px 0px 20px 0px #ffffff\" }}>\n          <ReactFlow elements={flowChart} arrowHeadColor={\"#ffffff\"}>\n            <Controls />\n            <Background\n              variant=\"dots\"\n              gap={16}\n              size={1}\n            />\n          </ReactFlow>\n        </div>\n\n        {/* Knobs */}\n        <div style={{ flex: 1, position: 'absolute', width: '32%', height: '70%', right: 0, top: 0 }}>\n          <div style={{ flex: 1, padding: 30, height: '93%' }}>\n            <div style={{ flex: 1, flexDirection: 'row', marginTop: 10 }}>\n              <div style={{ fontFamily: \"GemunuLibre-ExtraBold\", fontSize: 45, fontWeight: '600', textAlign: 'center' }}>Configuration</div>\n              <IconButton style={{ marginLeft: '90%', top: -45 }} onClick={() => setShowModal(!showModal)}>\n                <BsGear size={24} color='#7F8489' />\n              </IconButton>\n            </div>\n            <div style={{ justifyContent: 'center', alignItems: 'center', textAlign: 'center', fontSize: 25, fontFamily: \"GemunuLibre-SemiBold\", textDecoration: 'underline', marginBottom: '2%' }}>\n              Step 1: Adjust Knobs\n            </div>\n            <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={histArraySize} max={8} onChange={(event, value) => { setHistArraySize(value) }} onChangeCommitted={(event, value) => { setHistArraySize(value) }} />\n            <div style={{ flex: 1, fontFamily: \"GemunuLibre-Light\", fontSize: 20, textAlign: 'center', marginBottom: 25 }}>History Array Size</div>\n            <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={stepSize} max={8} onChange={(event, value) => { setStepSize(value) }} onChangeCommitted={(event, value) => { setStepSize(value) }} />\n            <div style={{ flex: 1, fontFamily: \"GemunuLibre-Light\", fontSize: 20, textAlign: 'center', marginBottom: 25 }}>Adaptation Step Size</div>\n            <div style={{ justifyContent: 'center', alignItems: 'center', textAlign: 'center', fontSize: 25, fontFamily: \"GemunuLibre-SemiBold\", textDecoration: 'underline', marginBottom: '2%', marginTop: '5%' }}>\n              Step 2: Enter Heuristic Equation\n            </div>\n            <div style={{ marginTop: '2%', borderWidth: 2, borderColor: \"#000\", borderStyle: 'solid', borderRadius: 5 }}>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 20, textAlign: 'center', fontWeight: 'bold', marginTop: '2%' }}>Adapt Up</div>\n              <BlockMath>{LaTeXEquation1}</BlockMath>\n              <div style={{ display: 'inline' }}>\n                <TextField label=\"Adapt Up\" variant=\"filled\" style={{ width: '100%' }} onChange={(event) => handleAdaptUp(event)}></TextField>\n              </div>\n            </div>\n            <div style={{ marginTop: '1%', borderWidth: 2, borderColor: \"#000\", borderStyle: 'solid', borderRadius: 5 }}>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 20, textAlign: 'center', fontWeight: 'bold', marginTop: '2%' }}>Adapt Down</div>\n              <BlockMath>{LaTeXEquation2}</BlockMath>\n              <div style={{ display: 'inline' }}>\n                <TextField label=\"Adapt Down\" variant=\"filled\" style={{ width: '100%' }} onChange={(event) => handleAdaptDown(event)}></TextField>\n              </div>\n            </div>\n            <div style={{ justifyContent: 'center', alignItems: 'center', textAlign: 'center', fontSize: 25, fontFamily: \"GemunuLibre-SemiBold\", textDecoration: 'underline', marginBottom: '2%', marginTop: '5%' }}>\n              Step 3: Check Adaptation and Run\n            </div>\n            <div style={{ flexDirection: 'row', marginLeft: '32%' }}>\n              <FormControlLabel\n                control={<Switch size={'medium'} color=\"primary\" onChange={() => adapt = !adapt} />}\n                label=\"Adapt\"\n              />\n              <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => executeScript()} >\n                Execute\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Statistics */}\n        <div style={{ flex: 1, position: 'absolute', width: '30%', height: '30%', right: 0, bottom: 0 }}>\n          <div style={{ flex: 1, padding: 30 }}>\n            <div style={{ flex: 1, fontFamily: \"GemunuLibre-ExtraBold\", fontSize: 45, textAlign: 'center' }}>Statistics</div>\n            <div style={{ flexDirection: 'row', marginTop: 70 }}>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 40, display: 'inline' }}>App Completions:</div>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 40, display: 'inline', marginLeft: '40%' }}>{appCompletions}</div>\n            </div>\n            <div style={{ flexDirection: 'row', marginTop: 70 }}>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 40, display: 'inline' }}>Accuracy:</div>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 40, display: 'inline', marginLeft: '50%' }}>{accuracy}%</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Chart */}\n        <div style={{ flex: 1, position: 'absolute', width: '70%', height: '30%', left: 0, bottom: 0 }}>\n          <Graph data={extraData} />\n        </div>\n\n        {/* Modal */}\n        <Dialog open={showModal} onClose={() => setShowModal(false)} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">Settings</DialogTitle>\n          <DialogActions>\n            <Button onClick={() => setShowModal(false)} color=\"primary\">\n              Cancel\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n      </div >\n\n      {/* Loading */}\n      {/* {showLoading ?\n        <div style={{ position: 'absolute', left: '50%', top: '40%' }}>\n          <CircularProgress\n            size={300}\n          />\n        </div>\n        : null\n      } */}\n\n    </>\n  );\n}\n\nexport default App;\n","/Users/aross/Desktop/adaptation-profiler/src/scripts/SimulationScript.js",["40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58"],"import File from '../misc/test.csv';\nimport MNIST from '../config/mnist.json';\nimport csv2array from './CSVToArray';\n\nasync function Main(histArraySize, stepSize, equation, adapt) {\n\n    console.log(\"equation\", equation)\n\n    // Notes:\n    // - button for run simulation\n    // - report total executions on UI/UX\n    // - loading indicator during executions\n    // - at each app completion: find skip rows, and skip columns -> convert to a string in the form of 0_0 -> find value from accuracy dictionary (make a dictionary too) -> average these values -> report this as ML accuracy\n\n    // Configuration\n    const configuration = MNIST.adaptationStrategy[0];\n\n    // Initial Values\n    const capacitance = 200e-6; //micro-farads\n    let newVoltage = 0; //volts\n    let oldVoltage = 0 //volts\n    let current = 0; //amperes\n    let simulationTime = 0; //seconds\n    let hasBeenMax = false;\n    let rawData;\n\n    // Useful Utility Arrays\n    let timeArray = [];\n    let accuracyArray = [];\n    let accuracyReturn = [];\n\n    // Task Management Logic\n    let bootTime = 0;\n    let executedTasks = false;\n    let currentTask = configuration.tasks[0];\n    let currentTaskNumber = 0;\n    let currentTaskIterationNumber = 0;\n    let adaptiveVariables = configuration.adaptiveVariables;\n\n    // Adaptation Equations\n    const equation1 = equation.adaptUp.split('>');\n    const equation2 = equation.adaptUp.split('>').pop();\n    const equation3 = equation.adaptDown.split('<')[0];\n    const equation4 = equation.adaptDown.split('<').pop();\n\n    // Adaptation Signals\n    let onTime = 0;\n    let avgOnTime = 0;\n    let s_onTime = new Array(histArraySize + 1).fill(0);\n\n    let offTime = 0;\n    let avgOffTime = 0;\n    let s_offTime = new Array(histArraySize + 1).fill(0);\n\n    let appCompletionTime = 0;\n    let avgAppCompletionTime = 0;\n    let s_appCompTime = new Array(histArraySize + 1).fill(0);\n\n    let taskCount = 0;\n    let avgTaskCount = 0;\n    let s_taskCount = new Array(histArraySize + 1).fill(0);\n\n    let powerFailureCount = 0;\n    let avgpowerFailureCount = 0;\n    let s_pFC = new Array(histArraySize + 1).fill(0);\n\n    let lowerAdaptationThreshold = 0;\n    let upperAdaptationThreshold = 7;\n    let adaptationStepSize = stepSize;\n\n    // Threshold Logic\n    let upperThresholdVoltage = 2.9 //volts\n    let lowerThresholdVoltage = 1.9 //volts\n\n    // Step Logic\n    let stepTime = 0.01; //seconds\n\n    // Global Runs Logic\n    let appCompletions = 0;\n    let appCompleted = false;\n\n    // Functions Library\n\n    async function getData() {\n        const response = await fetch(File);\n        const table = await response.text();\n        rawData = csv2array(table);\n    }\n\n    const initializeAdaptiveVariables = (variables) => {\n        let adaptiveVariablesValues = {}\n        for (var i = 0; i < variables.length; i++) {\n            adaptiveVariablesValues[variables[i]] = 0;\n        }\n        return adaptiveVariablesValues;\n    }\n\n    const average = list => list.reduce((prev, curr) => prev + curr) / list.length;\n\n    const executeTasks = (energy) => {\n\n        let availableEnergy = energy;\n        if (typeof currentTask.taskIterations !== 'number') {\n            let taskIterations;\n            for (var i = 0; i < currentTask.adaptiveVars.length; i++) {\n                window[currentTask.adaptiveVars[i]] = adaptiveVariablesValues[currentTask.adaptiveVars[i]];\n            }\n            taskIterations = eval(currentTask.taskIterations);\n            if (energy > currentTask.energyPerItr) {\n                stepTime = currentTask.time;\n                availableEnergy = energy - currentTask.energyPerItr;\n                taskCount = taskCount + currentTask.taskWeight;\n                currentTaskIterationNumber = currentTaskIterationNumber + 1;\n                if (taskIterations == currentTaskIterationNumber) {\n                    console.log(currentTask.taskName);\n                    console.log(\"task completion time\", simulationTime);\n                    if (currentTask.nextTask !== \"task_init\") {\n                        currentTaskIterationNumber = 0;\n                        currentTaskNumber = currentTaskNumber + 1;\n                        currentTask = configuration.tasks[currentTaskNumber];\n                    } else if (currentTask.nextTask === \"task_init\") {\n                        appCompleted = true;\n                    }\n                }\n                return availableEnergy;\n            } else {\n                stepTime = currentTask.time * (availableEnergy / currentTask.energyPerItr);\n                hasBeenMax = false;\n                powerFailureCount = powerFailureCount + 1;\n                availableEnergy = calculateEnergy(lowerThresholdVoltage);\n                return availableEnergy;\n            }\n        } else {\n            const taskIterations = currentTask.taskIterations;\n            if (energy > currentTask.energyPerItr) {\n                stepTime = currentTask.time;\n                availableEnergy = energy - currentTask.energyPerItr;\n                taskCount = taskCount + currentTask.taskWeight;\n                currentTaskIterationNumber = currentTaskIterationNumber + 1;\n                if (taskIterations === currentTaskIterationNumber) {\n                    console.log(currentTask.taskName);\n                    console.log(\"task completion time\", simulationTime);\n                    if (currentTask.nextTask !== \"task_init\") {\n                        currentTaskIterationNumber = 0;\n                        currentTaskNumber = currentTaskNumber + 1;\n                        currentTask = configuration.tasks[currentTaskNumber];\n                    } else if (currentTask.nextTask === \"task_init\") {\n                        appCompleted = true;\n                    }\n                }\n                return availableEnergy;\n            } else {\n                stepTime = currentTask.time * (availableEnergy / currentTask.energyPerItr)\n                hasBeenMax = false;\n                powerFailureCount = powerFailureCount + 1;\n                availableEnergy = calculateEnergy(lowerThresholdVoltage);\n                return availableEnergy;\n            }\n        }\n    }\n\n    const calculateNewVoltage = (v, c, t) => {\n        const newVoltage = ((1 / capacitance) * ((c) * (t))) + v;\n        return newVoltage\n    }\n\n    const calculateRemainingVoltage = (energy) => {\n        const voltage = Math.sqrt(2 * (1 / capacitance) * (energy));\n        return voltage\n    }\n\n    const calculateEnergy = (voltage) => {\n        const maxEnergy = (0.5) * (capacitance) * (voltage) * (voltage);\n        return maxEnergy\n    }\n\n    const findClosestValue = async (arr, val) => {\n        const closestValue = arr.reduce(function (prev, curr) {\n            return (Math.abs(curr - val) < Math.abs(prev - val) ? curr : prev);\n        });\n        return closestValue;\n    }\n\n    const extractTimeArray = async (arr) => {\n        let newTimeArray = []\n        let filteredArray = arr.filter((_, i) => i % 512 == 0);\n        for (var a = 0; a < filteredArray.length; a++) {\n            newTimeArray.push(filteredArray[a][0]);\n        }\n        return newTimeArray\n    }\n\n    const extractVoltageArray = async (arr, time) => {\n        let newVoltageArray = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i][0] == time) {\n                for (var j = i; j < 512 + i; j++) {\n                    newVoltageArray.push(arr[j][1]);\n                }\n                break;\n            }\n        }\n        return newVoltageArray\n    }\n\n    const findCurrentNow = (time, voltage) => {\n        for (var i = 0; i < rawData.length; i++) {\n            if (rawData[i][0] == time) {\n                for (var j = i; j < 512 + i; j++) {\n                    if (rawData[j][1] == voltage) {\n                        return rawData[j][2]\n                    }\n                }\n            }\n        }\n    }\n\n    const findAccuracyNow = () => {\n        const skipRows = adaptiveVariablesValues.skipRows;\n        const skipColumns = adaptiveVariablesValues.skipColumns;\n        const accuracyMapString = `${skipRows}_${skipColumns}`;\n        const accuracyMapValue = configuration.accuracyMap[accuracyMapString];\n        accuracyArray.push(accuracyMapValue);\n    }\n\n    const handleMLAccuracy = () => {\n        if (accuracyArray.length > 0) {\n            const averageAccuracy = accuracyArray.reduce((a, b) => a + b) / accuracyArray.length;\n            return averageAccuracy;\n        } else {\n            return 0;\n        }\n    }\n\n    // Adaptation\n    const adaptUp = () => {\n        if (adapt) {\n            if (adaptiveVariablesValues[\"skipRows\"] !== lowerAdaptationThreshold) {\n                adaptiveVariablesValues[\"skipRows\"] = adaptiveVariablesValues[\"skipRows\"] - adaptationStepSize;\n            }\n            if (adaptiveVariablesValues[\"skipColumns\"] !== lowerAdaptationThreshold) {\n                adaptiveVariablesValues[\"skipColumns\"] = adaptiveVariablesValues[\"skipColumns\"] - adaptationStepSize;\n            }\n        }\n    }\n\n    const adaptDown = () => {\n        if (adapt) {\n            if (adaptiveVariablesValues[\"skipRows\"] < upperAdaptationThreshold) {\n                adaptiveVariablesValues[\"skipRows\"] = adaptiveVariablesValues[\"skipRows\"] + adaptationStepSize;\n            }\n            if (adaptiveVariablesValues[\"skipColumns\"] < upperAdaptationThreshold) {\n                adaptiveVariablesValues[\"skipColumns\"] = adaptiveVariablesValues[\"skipColumns\"] + adaptationStepSize;\n            }\n        }\n    }\n\n    // Setup\n\n    await getData();\n    timeArray = await extractTimeArray(rawData);\n    const adaptiveVariablesValues = initializeAdaptiveVariables(adaptiveVariables);\n\n    // Main Script\n\n    while (simulationTime < timeArray[timeArray.length - 1]) {\n\n        // INSERT SOME LOGIC TO HANDLE TASKS HERE (POTENTIALLY)\n\n        bootTime = 0;\n\n        executedTasks = false;\n\n        // Call Charge Capacitor\n\n        // 1) Check which timestamp is closest to simulation time\n        const closestTimestamp = await findClosestValue(timeArray, simulationTime);\n        // console.log(\"closest Timestamp\", closestTimestamp)\n        // 1.5) Get array of voltages that corresponds to the given timestamp \n        const voltageArray = await extractVoltageArray(rawData, closestTimestamp);\n        // 2) Find which voltage closely coresponds to oldVoltage within this IV curve\n        const closestVoltage = await findClosestValue(voltageArray, oldVoltage);\n        // 3) Lookuptable based on those 2 values to find current\n        current = findCurrentNow(closestTimestamp, closestVoltage) * 15;\n        // 4) Calculate new voltage based on the current\n        newVoltage = calculateNewVoltage(oldVoltage, current, stepTime);\n\n        // Check If capacitor hits upper threshold\n        if (hasBeenMax === false && newVoltage >= upperThresholdVoltage) {\n            hasBeenMax = true;\n            const energy = calculateEnergy(newVoltage)\n            const usefulEnergy = energy - calculateEnergy(lowerThresholdVoltage);\n            const remainingUsefulEnergy = usefulEnergy - MNIST.initOverheadEnergy;\n            const totalRemainingEnergy = remainingUsefulEnergy + calculateEnergy(lowerThresholdVoltage);\n            newVoltage = calculateRemainingVoltage(totalRemainingEnergy)\n            bootTime = MNIST.time;\n            executedTasks = true;\n        }\n\n        if (hasBeenMax === true && newVoltage <= lowerThresholdVoltage) {\n            hasBeenMax = false;\n        }\n\n        // Execute if capacitor voltage is within upper and lower thresholds\n        if (newVoltage >= lowerThresholdVoltage && hasBeenMax === true) {\n            const energy = calculateEnergy(newVoltage);\n            const usefulEnergy = energy - calculateEnergy(lowerThresholdVoltage);\n            const remainingUsefulEnergy = executeTasks(usefulEnergy);\n            const totalRemainingEnergy = remainingUsefulEnergy + calculateEnergy(lowerThresholdVoltage);\n            oldVoltage = calculateRemainingVoltage(totalRemainingEnergy);\n            executedTasks = true;\n        } else {\n            stepTime = 0.01;\n            oldVoltage = newVoltage;\n            executedTasks = false;\n            taskCount = 0;\n        }\n\n        // Increments simulation time\n        simulationTime = simulationTime + stepTime + bootTime;\n\n        // Increments on/off time\n        if (executedTasks) {\n            onTime = onTime + ((stepTime + bootTime) * 1000);\n        } else {\n            offTime = offTime + (stepTime * 1000);\n        }\n        appCompletionTime = onTime + offTime;\n\n        // Handles App Completions\n        if (appCompleted) {\n            appCompletions = appCompletions + 1;\n            appCompleted = false;\n\n            // Push elements to the buffer\n            s_onTime.unshift(onTime);\n            s_onTime.pop();\n            s_offTime.unshift(offTime);\n            s_offTime.pop();\n            s_appCompTime.unshift(appCompletionTime);\n            s_appCompTime.pop();\n            s_taskCount.unshift(taskCount);\n            s_taskCount.pop();\n            s_pFC.unshift(powerFailureCount);\n            s_pFC.pop();\n            console.log(\"onTime\", s_onTime);\n            console.log(\"offTime\", s_offTime);\n            console.log(\"app completion time\", s_appCompTime);\n            console.log(\"taskCount\", s_taskCount);\n            console.log(\"failure count\", s_pFC);\n            console.log(\"skip Rows\", adaptiveVariablesValues[\"skipRows\"]);\n            console.log(\"skip Columns\", adaptiveVariablesValues[\"skipColumns\"]);\n\n            // Averaging\n            avgOnTime = average(s_onTime.slice(1, histArraySize));\n            avgOffTime = average(s_offTime.slice(1, histArraySize));\n            avgAppCompletionTime = average(s_appCompTime.slice(1, histArraySize));\n            avgTaskCount = average(s_taskCount.slice(1, histArraySize));\n            avgpowerFailureCount = average(s_pFC.slice(1, histArraySize));\n\n            // Handles Graphical Display\n            findAccuracyNow();\n            if (adaptiveVariablesValues[\"skipColumns\"] !== 0 || adaptiveVariablesValues[\"skipRows\"] !== 0) {\n                accuracyReturn.push({ Accuracy: accuracyArray[accuracyArray.length - 1], Time: simulationTime, Adapted: true })\n            } else if (adaptiveVariablesValues[\"skipColumns\"] == 0 || adaptiveVariablesValues[\"skipRows\"] == 0) {\n                accuracyReturn.push({ Accuracy: accuracyArray[accuracyArray.length - 1], Time: simulationTime, Adapted: false })\n            }\n\n            // Adaptation\n\n            // const shouldAdaptUp = evaluatex(equation.adaptUp,\n            //     { s_onTime: s_onTime },\n            //     { avgOnTime: avgOnTime },\n            //     { s_offTime: s_offTime },\n            //     { avgOffTime: avgOffTime },\n            //     { s_appCompTime: s_appCompTime },\n            //     { avgAppCompletionTime: avgAppCompletionTime },\n            //     { s_taskCount: s_taskCount },\n            //     { s_taskCount: s_taskCount },\n            //     { avgTaskCount: avgTaskCount },\n            //     { s_pFC: s_pFC },\n            //     { avgpowerFailureCount: avgpowerFailureCount },\n            //     { latex: true }\n            // );\n\n            // const shouldAdaptDown = evaluatex(equation.adaptDown,\n            //     { s_onTime: s_onTime },\n            //     { avgOnTime: avgOnTime },\n            //     { s_offTime: s_offTime },\n            //     { avgOffTime: avgOffTime },\n            //     { s_appCompTime: s_appCompTime },\n            //     { avgAppCompletionTime: avgAppCompletionTime },\n            //     { s_taskCount: s_taskCount },\n            //     { s_taskCount: s_taskCount },\n            //     { avgTaskCount: avgTaskCount },\n            //     { s_pFC: s_pFC },\n            //     { avgpowerFailureCount: avgpowerFailureCount },\n            //     { latex: true }\n            // );\n\n            // if (shouldAdaptUp()) {\n            //     adaptDown();\n            // }\n            // else if (shouldAdaptDown()) {\n            //     adaptUp();\n            // }\n\n            // if (equation.term1 === \"onTimeHistory\") {\n            //     if (s_onTime[0] > avgOnTime) {\n            //         adaptDown();\n            //     }\n            //     else if (s_onTime[0] < avgOnTime) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // if (equation.term1 === \"offTimeHistory\") {\n            //     if (s_offTime[0] > avgOffTime) {\n            //         adaptDown();\n            //     }\n            //     else if (s_offTime[0] < avgOffTime) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // if (equation.term1 === \"appCompletionTimeHistory\") {\n            //     if (s_appCompTime[0] > 1000) { // this is checking milli-seconds\n            //         adaptDown();\n            //     }\n            //     else if (s_appCompTime[0] < avgAppCompletionTime) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // if (equation.term1 === \"taskCountHistory\") {\n            //     if (s_taskCount[0] < avgTaskCount) {\n            //         adaptDown();\n            //     }\n            //     else if (s_taskCount[0] > avgTaskCount) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // if (equation.term1 === \"powerFailureCountHistory\") {\n            //     if (s_pFC[0] > avgpowerFailureCount) {\n            //         adaptDown();\n            //     }\n            //     else if (s_pFC[0] < avgpowerFailureCount) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // Reset adaptation signals\n            onTime = 0;\n            offTime = 0;\n            appCompletionTime = 0;\n            taskCount = 0;\n            powerFailureCount = 0;\n            currentTaskNumber = 0;\n            currentTaskIterationNumber = 0;\n            currentTask = configuration.tasks[currentTaskNumber];\n            console.log(\"app completions\", appCompletions);\n        }\n\n    }\n\n    // Cleanup\n\n    const mlAccuracy = handleMLAccuracy();\n    const roundedAccuracy = mlAccuracy.toFixed(2);\n    console.log(\"average accuracy of all classifications\", roundedAccuracy)\n    console.log(accuracyReturn)\n\n    // Return\n\n    return ({\n        appCompletions: appCompletions,\n        mlAccuracy: roundedAccuracy,\n        accuracyGraph: accuracyReturn\n    })\n\n}\n\nexport default Main","/Users/aross/Desktop/adaptation-profiler/src/components/Graph.js",[],"/Users/aross/Desktop/adaptation-profiler/src/scripts/CSVToArray.js",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93"],"function csv2array(data, delimeter) {\n    // Retrieve the delimeter\n    if (delimeter == undefined) \n      delimeter = ',';\n    if (delimeter && delimeter.length > 1)\n      delimeter = ',';\n  \n    // initialize variables\n    var newline = '\\n';\n    var eof = '';\n    var i = 0;\n    var c = data.charAt(i);\n    var row = 0;\n    var col = 0;\n    var array = new Array();\n  \n    while (c != eof) {\n      // skip whitespaces\n      while (c == ' ' || c == '\\t' || c == '\\r') {\n        c = data.charAt(++i); // read next char\n      }\n      \n      // get value\n      var value = \"\";\n      if (c == '\\\"') {\n        // value enclosed by double-quotes\n        c = data.charAt(++i);\n        \n        do {\n          if (c != '\\\"') {\n            // read a regular character and go to the next character\n            value += c;\n            c = data.charAt(++i);\n          }\n          \n          if (c == '\\\"') {\n            // check for escaped double-quote\n            var cnext = data.charAt(i+1);\n            if (cnext == '\\\"') {\n              // this is an escaped double-quote. \n              // Add a double-quote to the value, and move two characters ahead.\n              value += '\\\"';\n              i += 2;\n              c = data.charAt(i);\n            }\n          }\n        }\n        while (c != eof && c != '\\\"');\n        \n        if (c == eof) {\n          throw \"Unexpected end of data, double-quote expected\";\n        }\n  \n        c = data.charAt(++i);\n      }\n      else {\n        // value without quotes\n        while (c != eof && c != delimeter && c!= newline && c != ' ' && c != '\\t' && c != '\\r') {\n          value += c;\n          c = data.charAt(++i);\n        }\n      }\n  \n      // add the value to the array\n      if (array.length <= row) \n        array.push(new Array());\n      array[row].push(value);\n      \n      // skip whitespaces\n      while (c == ' ' || c == '\\t' || c == '\\r') {\n        c = data.charAt(++i);\n      }\n  \n      // go to the next row or column\n      if (c == delimeter) {\n        // to the next column\n        col++;\n      }\n      else if (c == newline) {\n        // to the next row\n        col = 0;\n        row++;\n      }\n      else if (c != eof) {\n        // unexpected character\n        throw \"Delimiter expected after character \" + i;\n      }\n      \n      // go to the next character\n      c = data.charAt(++i);\n    }  \n    \n    return array;\n  }\n\n  export default csv2array ","/Users/aross/Desktop/adaptation-profiler/src/scripts/GraphScript.js",[],{"ruleId":"94","severity":1,"message":"95","line":1,"column":38,"nodeType":"96","messageId":"97","endLine":1,"endColumn":44},{"ruleId":"94","severity":1,"message":"98","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":14},{"ruleId":"94","severity":1,"message":"99","line":8,"column":111,"nodeType":"96","messageId":"97","endLine":8,"endColumn":127},{"ruleId":"94","severity":1,"message":"100","line":9,"column":10,"nodeType":"96","messageId":"97","endLine":9,"endColumn":22},{"ruleId":"94","severity":1,"message":"101","line":22,"column":30,"nodeType":"96","messageId":"97","endLine":22,"endColumn":51},{"ruleId":"94","severity":1,"message":"102","line":23,"column":17,"nodeType":"96","messageId":"97","endLine":23,"endColumn":25},{"ruleId":"94","severity":1,"message":"103","line":24,"column":10,"nodeType":"96","messageId":"97","endLine":24,"endColumn":15},{"ruleId":"94","severity":1,"message":"104","line":24,"column":17,"nodeType":"96","messageId":"97","endLine":24,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":43,"column":6,"nodeType":"107","endLine":43,"endColumn":8,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":49,"column":36,"nodeType":"111","messageId":"112","endLine":49,"endColumn":38},{"ruleId":"94","severity":1,"message":"113","line":174,"column":11,"nodeType":"96","messageId":"97","endLine":174,"endColumn":19},{"ruleId":"94","severity":1,"message":"114","line":41,"column":11,"nodeType":"96","messageId":"97","endLine":41,"endColumn":20},{"ruleId":"94","severity":1,"message":"115","line":42,"column":11,"nodeType":"96","messageId":"97","endLine":42,"endColumn":20},{"ruleId":"94","severity":1,"message":"116","line":43,"column":11,"nodeType":"96","messageId":"97","endLine":43,"endColumn":20},{"ruleId":"94","severity":1,"message":"117","line":44,"column":11,"nodeType":"96","messageId":"97","endLine":44,"endColumn":20},{"ruleId":"118","severity":1,"message":"119","line":108,"column":30,"nodeType":"120","messageId":"121","endLine":108,"endColumn":34},{"ruleId":"122","severity":1,"message":"123","line":114,"column":36,"nodeType":"124","messageId":"121","endLine":114,"endColumn":38},{"ruleId":"122","severity":1,"message":"123","line":186,"column":58,"nodeType":"124","messageId":"121","endLine":186,"endColumn":60},{"ruleId":"122","severity":1,"message":"123","line":196,"column":27,"nodeType":"124","messageId":"121","endLine":196,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":208,"column":31,"nodeType":"124","messageId":"121","endLine":208,"endColumn":33},{"ruleId":"122","severity":1,"message":"123","line":210,"column":39,"nodeType":"124","messageId":"121","endLine":210,"endColumn":41},{"ruleId":"94","severity":1,"message":"125","line":236,"column":11,"nodeType":"96","messageId":"97","endLine":236,"endColumn":18},{"ruleId":"94","severity":1,"message":"126","line":247,"column":11,"nodeType":"96","messageId":"97","endLine":247,"endColumn":20},{"ruleId":"94","severity":1,"message":"127","line":355,"column":13,"nodeType":"96","messageId":"97","endLine":355,"endColumn":22},{"ruleId":"94","severity":1,"message":"128","line":356,"column":13,"nodeType":"96","messageId":"97","endLine":356,"endColumn":23},{"ruleId":"94","severity":1,"message":"129","line":357,"column":13,"nodeType":"96","messageId":"97","endLine":357,"endColumn":33},{"ruleId":"94","severity":1,"message":"130","line":358,"column":13,"nodeType":"96","messageId":"97","endLine":358,"endColumn":25},{"ruleId":"94","severity":1,"message":"131","line":359,"column":13,"nodeType":"96","messageId":"97","endLine":359,"endColumn":33},{"ruleId":"122","severity":1,"message":"123","line":365,"column":63,"nodeType":"124","messageId":"121","endLine":365,"endColumn":65},{"ruleId":"122","severity":1,"message":"123","line":365,"column":107,"nodeType":"124","messageId":"121","endLine":365,"endColumn":109},{"ruleId":"122","severity":1,"message":"123","line":3,"column":19,"nodeType":"124","messageId":"121","endLine":3,"endColumn":21},{"ruleId":"132","severity":1,"message":"133","line":15,"column":17,"nodeType":"134","messageId":"135","endLine":15,"endColumn":28},{"ruleId":"122","severity":1,"message":"136","line":17,"column":14,"nodeType":"124","messageId":"121","endLine":17,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":19,"column":16,"nodeType":"124","messageId":"121","endLine":19,"endColumn":18},{"ruleId":"122","severity":1,"message":"123","line":19,"column":28,"nodeType":"124","messageId":"121","endLine":19,"endColumn":30},{"ruleId":"122","severity":1,"message":"123","line":19,"column":41,"nodeType":"124","messageId":"121","endLine":19,"endColumn":43},{"ruleId":"122","severity":1,"message":"123","line":25,"column":13,"nodeType":"124","messageId":"121","endLine":25,"endColumn":15},{"ruleId":"137","severity":1,"message":"138","line":25,"column":17,"nodeType":"139","messageId":"140","endLine":25,"endColumn":18,"suggestions":"141"},{"ruleId":"122","severity":1,"message":"136","line":30,"column":17,"nodeType":"124","messageId":"121","endLine":30,"endColumn":19},{"ruleId":"137","severity":1,"message":"138","line":30,"column":21,"nodeType":"139","messageId":"140","endLine":30,"endColumn":22,"suggestions":"142"},{"ruleId":"122","severity":1,"message":"123","line":36,"column":17,"nodeType":"124","messageId":"121","endLine":36,"endColumn":19},{"ruleId":"137","severity":1,"message":"138","line":36,"column":21,"nodeType":"139","messageId":"140","endLine":36,"endColumn":22,"suggestions":"143"},{"ruleId":"122","severity":1,"message":"123","line":39,"column":23,"nodeType":"124","messageId":"121","endLine":39,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":39,"column":27,"nodeType":"139","messageId":"140","endLine":39,"endColumn":28,"suggestions":"144"},{"ruleId":"137","severity":1,"message":"138","line":42,"column":25,"nodeType":"139","messageId":"140","endLine":42,"endColumn":26,"suggestions":"145"},{"ruleId":"122","severity":1,"message":"136","line":48,"column":18,"nodeType":"124","messageId":"121","endLine":48,"endColumn":20},{"ruleId":"122","severity":1,"message":"136","line":48,"column":30,"nodeType":"124","messageId":"121","endLine":48,"endColumn":32},{"ruleId":"137","severity":1,"message":"138","line":48,"column":34,"nodeType":"139","messageId":"140","endLine":48,"endColumn":35,"suggestions":"146"},{"ruleId":"122","severity":1,"message":"123","line":50,"column":15,"nodeType":"124","messageId":"121","endLine":50,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":51,"column":11,"nodeType":"149","messageId":"150","endLine":51,"endColumn":65},{"ruleId":"122","severity":1,"message":"136","line":58,"column":18,"nodeType":"124","messageId":"121","endLine":58,"endColumn":20},{"ruleId":"122","severity":1,"message":"136","line":58,"column":30,"nodeType":"124","messageId":"121","endLine":58,"endColumn":32},{"ruleId":"122","severity":1,"message":"136","line":58,"column":47,"nodeType":"124","messageId":"121","endLine":58,"endColumn":49},{"ruleId":"122","severity":1,"message":"136","line":58,"column":63,"nodeType":"124","messageId":"121","endLine":58,"endColumn":65},{"ruleId":"122","severity":1,"message":"136","line":58,"column":75,"nodeType":"124","messageId":"121","endLine":58,"endColumn":77},{"ruleId":"122","severity":1,"message":"136","line":58,"column":88,"nodeType":"124","messageId":"121","endLine":58,"endColumn":90},{"ruleId":"132","severity":1,"message":"133","line":66,"column":20,"nodeType":"134","messageId":"135","endLine":66,"endColumn":31},{"ruleId":"122","severity":1,"message":"123","line":70,"column":16,"nodeType":"124","messageId":"121","endLine":70,"endColumn":18},{"ruleId":"122","severity":1,"message":"123","line":70,"column":28,"nodeType":"124","messageId":"121","endLine":70,"endColumn":30},{"ruleId":"122","severity":1,"message":"123","line":70,"column":41,"nodeType":"124","messageId":"121","endLine":70,"endColumn":43},{"ruleId":"122","severity":1,"message":"123","line":75,"column":13,"nodeType":"124","messageId":"121","endLine":75,"endColumn":15},{"ruleId":"122","severity":1,"message":"123","line":79,"column":18,"nodeType":"124","messageId":"121","endLine":79,"endColumn":20},{"ruleId":"94","severity":1,"message":"151","line":81,"column":9,"nodeType":"96","messageId":"97","endLine":81,"endColumn":12},{"ruleId":"122","severity":1,"message":"136","line":84,"column":18,"nodeType":"124","messageId":"121","endLine":84,"endColumn":20},{"ruleId":"147","severity":1,"message":"148","line":86,"column":9,"nodeType":"149","messageId":"150","endLine":86,"endColumn":57},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Hawaii' is defined but never used.","'CircularProgress' is defined but never used.","'Autocomplete' is defined but never used.","'setAdaptationStrategy' is assigned a value but never used.","'setTasks' is assigned a value but never used.","'knobs' is assigned a value but never used.","'setKnobs' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'elements' and 'getElements'. Either include them or remove the dependency array.","ArrayExpression",["152"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'equation' is assigned a value but never used.","'equation1' is assigned a value but never used.","'equation2' is assigned a value but never used.","'equation3' is assigned a value but never used.","'equation4' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'adaptUp' is assigned a value but never used.","'adaptDown' is assigned a value but never used.","'avgOnTime' is assigned a value but never used.","'avgOffTime' is assigned a value but never used.","'avgAppCompletionTime' is assigned a value but never used.","'avgTaskCount' is assigned a value but never used.","'avgpowerFailureCount' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","Expected '!==' and instead saw '!='.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["153","154"],["155","156"],["157","158"],["159","160"],["161","162"],["163","164"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'col' is assigned a value but never used.",{"desc":"165","fix":"166"},{"messageId":"167","fix":"168","desc":"169"},{"messageId":"170","fix":"171","desc":"172"},{"messageId":"167","fix":"173","desc":"169"},{"messageId":"170","fix":"174","desc":"172"},{"messageId":"167","fix":"175","desc":"169"},{"messageId":"170","fix":"176","desc":"172"},{"messageId":"167","fix":"177","desc":"169"},{"messageId":"170","fix":"178","desc":"172"},{"messageId":"167","fix":"179","desc":"169"},{"messageId":"170","fix":"180","desc":"172"},{"messageId":"167","fix":"181","desc":"169"},{"messageId":"170","fix":"182","desc":"172"},"Update the dependencies array to be: [elements, getElements]",{"range":"183","text":"184"},"removeEscape",{"range":"185","text":"186"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"187","text":"188"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"189","text":"186"},{"range":"190","text":"188"},{"range":"191","text":"186"},{"range":"192","text":"188"},{"range":"193","text":"186"},{"range":"194","text":"188"},{"range":"195","text":"186"},{"range":"196","text":"188"},{"range":"197","text":"186"},{"range":"198","text":"188"},[1924,1926],"[elements, getElements]",[592,593],"",[592,592],"\\",[714,715],[714,714],[891,892],[891,891],[1012,1013],[1012,1012],[1175,1176],[1175,1175],[1305,1306],[1305,1305]]