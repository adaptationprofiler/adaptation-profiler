{"ast":null,"code":"function csv2array(data,delimeter){// Retrieve the delimeter\nif(delimeter==undefined)delimeter=',';if(delimeter&&delimeter.length>1)delimeter=',';// initialize variables\nvar newline='\\n';var eof='';var i=0;var c=data.charAt(i);var row=0;var col=0;var array=new Array();while(c!=eof){// skip whitespaces\nwhile(c==' '||c=='\\t'||c=='\\r'){c=data.charAt(++i);// read next char\n}// get value\nvar value=\"\";if(c=='\\\"'){// value enclosed by double-quotes\nc=data.charAt(++i);do{if(c!='\\\"'){// read a regular character and go to the next character\nvalue+=c;c=data.charAt(++i);}if(c=='\\\"'){// check for escaped double-quote\nvar cnext=data.charAt(i+1);if(cnext=='\\\"'){// this is an escaped double-quote. \n// Add a double-quote to the value, and move two characters ahead.\nvalue+='\\\"';i+=2;c=data.charAt(i);}}}while(c!=eof&&c!='\\\"');if(c==eof){throw\"Unexpected end of data, double-quote expected\";}c=data.charAt(++i);}else{// value without quotes\nwhile(c!=eof&&c!=delimeter&&c!=newline&&c!=' '&&c!='\\t'&&c!='\\r'){value+=c;c=data.charAt(++i);}}// add the value to the array\nif(array.length<=row)array.push(new Array());array[row].push(value);// skip whitespaces\nwhile(c==' '||c=='\\t'||c=='\\r'){c=data.charAt(++i);}// go to the next row or column\nif(c==delimeter){// to the next column\ncol++;}else if(c==newline){// to the next row\ncol=0;row++;}else if(c!=eof){// unexpected character\nthrow\"Delimiter expected after character \"+i;}// go to the next character\nc=data.charAt(++i);}return array;}export default csv2array;","map":{"version":3,"sources":["/Users/aross/Desktop/adaptation-profiler/src/scripts/CSVToArray.js"],"names":["csv2array","data","delimeter","undefined","length","newline","eof","i","c","charAt","row","col","array","Array","value","cnext","push"],"mappings":"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","sourcesContent":["function csv2array(data, delimeter) {\n    // Retrieve the delimeter\n    if (delimeter == undefined) \n      delimeter = ',';\n    if (delimeter && delimeter.length > 1)\n      delimeter = ',';\n  \n    // initialize variables\n    var newline = '\\n';\n    var eof = '';\n    var i = 0;\n    var c = data.charAt(i);\n    var row = 0;\n    var col = 0;\n    var array = new Array();\n  \n    while (c != eof) {\n      // skip whitespaces\n      while (c == ' ' || c == '\\t' || c == '\\r') {\n        c = data.charAt(++i); // read next char\n      }\n      \n      // get value\n      var value = \"\";\n      if (c == '\\\"') {\n        // value enclosed by double-quotes\n        c = data.charAt(++i);\n        \n        do {\n          if (c != '\\\"') {\n            // read a regular character and go to the next character\n            value += c;\n            c = data.charAt(++i);\n          }\n          \n          if (c == '\\\"') {\n            // check for escaped double-quote\n            var cnext = data.charAt(i+1);\n            if (cnext == '\\\"') {\n              // this is an escaped double-quote. \n              // Add a double-quote to the value, and move two characters ahead.\n              value += '\\\"';\n              i += 2;\n              c = data.charAt(i);\n            }\n          }\n        }\n        while (c != eof && c != '\\\"');\n        \n        if (c == eof) {\n          throw \"Unexpected end of data, double-quote expected\";\n        }\n  \n        c = data.charAt(++i);\n      }\n      else {\n        // value without quotes\n        while (c != eof && c != delimeter && c!= newline && c != ' ' && c != '\\t' && c != '\\r') {\n          value += c;\n          c = data.charAt(++i);\n        }\n      }\n  \n      // add the value to the array\n      if (array.length <= row) \n        array.push(new Array());\n      array[row].push(value);\n      \n      // skip whitespaces\n      while (c == ' ' || c == '\\t' || c == '\\r') {\n        c = data.charAt(++i);\n      }\n  \n      // go to the next row or column\n      if (c == delimeter) {\n        // to the next column\n        col++;\n      }\n      else if (c == newline) {\n        // to the next row\n        col = 0;\n        row++;\n      }\n      else if (c != eof) {\n        // unexpected character\n        throw \"Delimiter expected after character \" + i;\n      }\n      \n      // go to the next character\n      c = data.charAt(++i);\n    }  \n    \n    return array;\n  }\n\n  export default csv2array "]},"metadata":{},"sourceType":"module"}