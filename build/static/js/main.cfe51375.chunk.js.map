{"version":3,"sources":["misc/test.csv","scripts/CSVToArray.js","scripts/SimulationScript.js","scripts/GraphScript.js","components/Graph.js","images/Hawaii.png","App.js","index.js"],"names":["csv2array","data","delimeter","undefined","length","i","c","charAt","row","array","Array","value","push","col","Main","histArraySize","stepSize","equation","adapt","getData","a","fetch","File","response","text","table","rawData","console","log","configuration","MNIST","adaptationStrategy","capacitance","newVoltage","oldVoltage","current","simulationTime","hasBeenMax","timeArray","accuracyArray","accuracyReturn","bootTime","executedTasks","currentTask","tasks","currentTaskNumber","currentTaskIterationNumber","adaptiveVariables","equation1","adaptUp","split","equation2","pop","equation3","adaptDown","equation4","onTime","avgOnTime","s_onTime","fill","offTime","avgOffTime","s_offTime","appCompletionTime","avgAppCompletionTime","s_appCompTime","taskCount","avgTaskCount","s_taskCount","powerFailureCount","avgpowerFailureCount","s_pFC","lowerAdaptationThreshold","upperAdaptationThreshold","adaptationStepSize","upperThresholdVoltage","lowerThresholdVoltage","stepTime","appCompletions","appCompleted","initializeAdaptiveVariables","variables","adaptiveVariablesValues","average","list","reduce","prev","curr","executeTasks","energy","availableEnergy","taskIterations","adaptiveVars","window","eval","energyPerItr","time","taskWeight","taskName","nextTask","calculateEnergy","calculateNewVoltage","v","t","calculateRemainingVoltage","Math","sqrt","voltage","findClosestValue","arr","val","closestValue","abs","extractTimeArray","newTimeArray","filteredArray","filter","_","extractVoltageArray","newVoltageArray","j","findCurrentNow","findAccuracyNow","skipRows","skipColumns","accuracyMapString","accuracyMapValue","accuracyMap","handleMLAccuracy","b","closestTimestamp","voltageArray","closestVoltage","usefulEnergy","remainingUsefulEnergy","initOverheadEnergy","totalRemainingEnergy","unshift","slice","Accuracy","Time","Adapted","mlAccuracy","roundedAccuracy","toFixed","accuracyGraph","mpp","findMaxPowerPoint","input","temp_time","forEach","item","index","max","apply","dotProduct","zipArray","array1","array2","map","e","formatData","Power","formattedData","Example","props","state","accuracy","extraData","GraphScript","then","setState","ResponsiveContainer","width","height","AreaChart","this","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","XAxis","dataKey","type","domain","ticks","Label","position","YAxis","angle","yAxisId","orientation","Tooltip","Legend","verticalAlign","Area","stroke","fillOpacity","activeDot","r","PureComponent","App","elements","JSONdata","useState","flowChart","setFlowChart","setAppCompletions","setAccuracy","setExtraData","String","raw","LaTeXEquation1","setLaTeXEquation1","LaTeXEquation2","setLaTeXEquation2","showModal","setShowModal","showLoading","setShowLoading","setHistArraySize","setStepSize","useEffect","getElements","x","y","label","sourcePosition","targetPosition","style","backgroundColor","borderRadius","padding","fontSize","fontWeight","source","target","arrowHeadType","animated","strokeWidth","PrettoSlider","withStyles","root","color","thumb","border","marginTop","marginLeft","boxShadow","active","valueLabel","track","rail","Slider","pointerEvents","opacity","flex","arrowHeadColor","variant","gap","size","flexDirection","fontFamily","textAlign","IconButton","onClick","justifyContent","alignItems","textDecoration","marginBottom","valueLabelDisplay","aria-label","onChange","event","onChangeCommitted","borderWidth","borderColor","borderStyle","display","TextField","handleAdaptUp","handleAdaptDown","FormControlLabel","control","Switch","Button","SimulationScript","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogActions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfe51375.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/test.b7d6ebc6.csv\";","function csv2array(data, delimeter) {\n    // Retrieve the delimeter\n    if (delimeter == undefined) \n      delimeter = ',';\n    if (delimeter && delimeter.length > 1)\n      delimeter = ',';\n  \n    // initialize variables\n    var newline = '\\n';\n    var eof = '';\n    var i = 0;\n    var c = data.charAt(i);\n    var row = 0;\n    var col = 0;\n    var array = new Array();\n  \n    while (c != eof) {\n      // skip whitespaces\n      while (c == ' ' || c == '\\t' || c == '\\r') {\n        c = data.charAt(++i); // read next char\n      }\n      \n      // get value\n      var value = \"\";\n      if (c == '\\\"') {\n        // value enclosed by double-quotes\n        c = data.charAt(++i);\n        \n        do {\n          if (c != '\\\"') {\n            // read a regular character and go to the next character\n            value += c;\n            c = data.charAt(++i);\n          }\n          \n          if (c == '\\\"') {\n            // check for escaped double-quote\n            var cnext = data.charAt(i+1);\n            if (cnext == '\\\"') {\n              // this is an escaped double-quote. \n              // Add a double-quote to the value, and move two characters ahead.\n              value += '\\\"';\n              i += 2;\n              c = data.charAt(i);\n            }\n          }\n        }\n        while (c != eof && c != '\\\"');\n        \n        if (c == eof) {\n          throw \"Unexpected end of data, double-quote expected\";\n        }\n  \n        c = data.charAt(++i);\n      }\n      else {\n        // value without quotes\n        while (c != eof && c != delimeter && c!= newline && c != ' ' && c != '\\t' && c != '\\r') {\n          value += c;\n          c = data.charAt(++i);\n        }\n      }\n  \n      // add the value to the array\n      if (array.length <= row) \n        array.push(new Array());\n      array[row].push(value);\n      \n      // skip whitespaces\n      while (c == ' ' || c == '\\t' || c == '\\r') {\n        c = data.charAt(++i);\n      }\n  \n      // go to the next row or column\n      if (c == delimeter) {\n        // to the next column\n        col++;\n      }\n      else if (c == newline) {\n        // to the next row\n        col = 0;\n        row++;\n      }\n      else if (c != eof) {\n        // unexpected character\n        throw \"Delimiter expected after character \" + i;\n      }\n      \n      // go to the next character\n      c = data.charAt(++i);\n    }  \n    \n    return array;\n  }\n\n  export default csv2array ","import File from '../misc/test.csv';\nimport MNIST from '../config/mnist.json';\nimport csv2array from './CSVToArray';\n\nasync function Main(histArraySize, stepSize, equation, adapt) {\n\n    console.log(\"equation\", equation)\n\n    // Notes:\n    // - button for run simulation\n    // - report total executions on UI/UX\n    // - loading indicator during executions\n    // - at each app completion: find skip rows, and skip columns -> convert to a string in the form of 0_0 -> find value from accuracy dictionary (make a dictionary too) -> average these values -> report this as ML accuracy\n\n    // Configuration\n    const configuration = MNIST.adaptationStrategy[0];\n\n    // Initial Values\n    const capacitance = 200e-6; //micro-farads\n    let newVoltage = 0; //volts\n    let oldVoltage = 0 //volts\n    let current = 0; //amperes\n    let simulationTime = 0; //seconds\n    let hasBeenMax = false;\n    let rawData;\n\n    // Useful Utility Arrays\n    let timeArray = [];\n    let accuracyArray = [];\n    let accuracyReturn = [];\n\n    // Task Management Logic\n    let bootTime = 0;\n    let executedTasks = false;\n    let currentTask = configuration.tasks[0];\n    let currentTaskNumber = 0;\n    let currentTaskIterationNumber = 0;\n    let adaptiveVariables = configuration.adaptiveVariables;\n\n    // Adaptation Equations\n    const equation1 = equation.adaptUp.split('>');\n    const equation2 = equation.adaptUp.split('>').pop();\n    const equation3 = equation.adaptDown.split('<')[0];\n    const equation4 = equation.adaptDown.split('<').pop();\n\n    // Adaptation Signals\n    let onTime = 0;\n    let avgOnTime = 0;\n    let s_onTime = new Array(histArraySize + 1).fill(0);\n\n    let offTime = 0;\n    let avgOffTime = 0;\n    let s_offTime = new Array(histArraySize + 1).fill(0);\n\n    let appCompletionTime = 0;\n    let avgAppCompletionTime = 0;\n    let s_appCompTime = new Array(histArraySize + 1).fill(0);\n\n    let taskCount = 0;\n    let avgTaskCount = 0;\n    let s_taskCount = new Array(histArraySize + 1).fill(0);\n\n    let powerFailureCount = 0;\n    let avgpowerFailureCount = 0;\n    let s_pFC = new Array(histArraySize + 1).fill(0);\n\n    let lowerAdaptationThreshold = 0;\n    let upperAdaptationThreshold = 7;\n    let adaptationStepSize = stepSize;\n\n    // Threshold Logic\n    let upperThresholdVoltage = 2.9 //volts\n    let lowerThresholdVoltage = 1.9 //volts\n\n    // Step Logic\n    let stepTime = 0.01; //seconds\n\n    // Global Runs Logic\n    let appCompletions = 0;\n    let appCompleted = false;\n\n    // Functions Library\n\n    async function getData() {\n        const response = await fetch(File);\n        const table = await response.text();\n        rawData = csv2array(table);\n    }\n\n    const initializeAdaptiveVariables = (variables) => {\n        let adaptiveVariablesValues = {}\n        for (var i = 0; i < variables.length; i++) {\n            adaptiveVariablesValues[variables[i]] = 0;\n        }\n        return adaptiveVariablesValues;\n    }\n\n    const average = list => list.reduce((prev, curr) => prev + curr) / list.length;\n\n    const executeTasks = (energy) => {\n\n        let availableEnergy = energy;\n        if (typeof currentTask.taskIterations !== 'number') {\n            let taskIterations;\n            for (var i = 0; i < currentTask.adaptiveVars.length; i++) {\n                window[currentTask.adaptiveVars[i]] = adaptiveVariablesValues[currentTask.adaptiveVars[i]];\n            }\n            taskIterations = eval(currentTask.taskIterations);\n            if (energy > currentTask.energyPerItr) {\n                stepTime = currentTask.time;\n                availableEnergy = energy - currentTask.energyPerItr;\n                taskCount = taskCount + currentTask.taskWeight;\n                currentTaskIterationNumber = currentTaskIterationNumber + 1;\n                if (taskIterations == currentTaskIterationNumber) {\n                    console.log(currentTask.taskName);\n                    console.log(\"task completion time\", simulationTime);\n                    if (currentTask.nextTask !== \"task_init\") {\n                        currentTaskIterationNumber = 0;\n                        currentTaskNumber = currentTaskNumber + 1;\n                        currentTask = configuration.tasks[currentTaskNumber];\n                    } else if (currentTask.nextTask === \"task_init\") {\n                        appCompleted = true;\n                    }\n                }\n                return availableEnergy;\n            } else {\n                stepTime = currentTask.time * (availableEnergy / currentTask.energyPerItr);\n                hasBeenMax = false;\n                powerFailureCount = powerFailureCount + 1;\n                availableEnergy = calculateEnergy(lowerThresholdVoltage);\n                return availableEnergy;\n            }\n        } else {\n            const taskIterations = currentTask.taskIterations;\n            if (energy > currentTask.energyPerItr) {\n                stepTime = currentTask.time;\n                availableEnergy = energy - currentTask.energyPerItr;\n                taskCount = taskCount + currentTask.taskWeight;\n                currentTaskIterationNumber = currentTaskIterationNumber + 1;\n                if (taskIterations === currentTaskIterationNumber) {\n                    console.log(currentTask.taskName);\n                    console.log(\"task completion time\", simulationTime);\n                    if (currentTask.nextTask !== \"task_init\") {\n                        currentTaskIterationNumber = 0;\n                        currentTaskNumber = currentTaskNumber + 1;\n                        currentTask = configuration.tasks[currentTaskNumber];\n                    } else if (currentTask.nextTask === \"task_init\") {\n                        appCompleted = true;\n                    }\n                }\n                return availableEnergy;\n            } else {\n                stepTime = currentTask.time * (availableEnergy / currentTask.energyPerItr)\n                hasBeenMax = false;\n                powerFailureCount = powerFailureCount + 1;\n                availableEnergy = calculateEnergy(lowerThresholdVoltage);\n                return availableEnergy;\n            }\n        }\n    }\n\n    const calculateNewVoltage = (v, c, t) => {\n        const newVoltage = ((1 / capacitance) * ((c) * (t))) + v;\n        return newVoltage\n    }\n\n    const calculateRemainingVoltage = (energy) => {\n        const voltage = Math.sqrt(2 * (1 / capacitance) * (energy));\n        return voltage\n    }\n\n    const calculateEnergy = (voltage) => {\n        const maxEnergy = (0.5) * (capacitance) * (voltage) * (voltage);\n        return maxEnergy\n    }\n\n    const findClosestValue = async (arr, val) => {\n        const closestValue = arr.reduce(function (prev, curr) {\n            return (Math.abs(curr - val) < Math.abs(prev - val) ? curr : prev);\n        });\n        return closestValue;\n    }\n\n    const extractTimeArray = async (arr) => {\n        let newTimeArray = []\n        let filteredArray = arr.filter((_, i) => i % 512 == 0);\n        for (var a = 0; a < filteredArray.length; a++) {\n            newTimeArray.push(filteredArray[a][0]);\n        }\n        return newTimeArray\n    }\n\n    const extractVoltageArray = async (arr, time) => {\n        let newVoltageArray = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i][0] == time) {\n                for (var j = i; j < 512 + i; j++) {\n                    newVoltageArray.push(arr[j][1]);\n                }\n                break;\n            }\n        }\n        return newVoltageArray\n    }\n\n    const findCurrentNow = (time, voltage) => {\n        for (var i = 0; i < rawData.length; i++) {\n            if (rawData[i][0] == time) {\n                for (var j = i; j < 512 + i; j++) {\n                    if (rawData[j][1] == voltage) {\n                        return rawData[j][2]\n                    }\n                }\n            }\n        }\n    }\n\n    const findAccuracyNow = () => {\n        const skipRows = adaptiveVariablesValues.skipRows;\n        const skipColumns = adaptiveVariablesValues.skipColumns;\n        const accuracyMapString = `${skipRows}_${skipColumns}`;\n        const accuracyMapValue = configuration.accuracyMap[accuracyMapString];\n        accuracyArray.push(accuracyMapValue);\n    }\n\n    const handleMLAccuracy = () => {\n        if (accuracyArray.length > 0) {\n            const averageAccuracy = accuracyArray.reduce((a, b) => a + b) / accuracyArray.length;\n            return averageAccuracy;\n        } else {\n            return 0;\n        }\n    }\n\n    // Adaptation\n    const adaptUp = () => {\n        if (adapt) {\n            if (adaptiveVariablesValues[\"skipRows\"] !== lowerAdaptationThreshold) {\n                adaptiveVariablesValues[\"skipRows\"] = adaptiveVariablesValues[\"skipRows\"] - adaptationStepSize;\n            }\n            if (adaptiveVariablesValues[\"skipColumns\"] !== lowerAdaptationThreshold) {\n                adaptiveVariablesValues[\"skipColumns\"] = adaptiveVariablesValues[\"skipColumns\"] - adaptationStepSize;\n            }\n        }\n    }\n\n    const adaptDown = () => {\n        if (adapt) {\n            if (adaptiveVariablesValues[\"skipRows\"] < upperAdaptationThreshold) {\n                adaptiveVariablesValues[\"skipRows\"] = adaptiveVariablesValues[\"skipRows\"] + adaptationStepSize;\n            }\n            if (adaptiveVariablesValues[\"skipColumns\"] < upperAdaptationThreshold) {\n                adaptiveVariablesValues[\"skipColumns\"] = adaptiveVariablesValues[\"skipColumns\"] + adaptationStepSize;\n            }\n        }\n    }\n\n    // Setup\n\n    await getData();\n    timeArray = await extractTimeArray(rawData);\n    const adaptiveVariablesValues = initializeAdaptiveVariables(adaptiveVariables);\n\n    // Main Script\n\n    while (simulationTime < timeArray[timeArray.length - 1]) {\n\n        // INSERT SOME LOGIC TO HANDLE TASKS HERE (POTENTIALLY)\n\n        bootTime = 0;\n\n        executedTasks = false;\n\n        // Call Charge Capacitor\n\n        // 1) Check which timestamp is closest to simulation time\n        const closestTimestamp = await findClosestValue(timeArray, simulationTime);\n        // console.log(\"closest Timestamp\", closestTimestamp)\n        // 1.5) Get array of voltages that corresponds to the given timestamp \n        const voltageArray = await extractVoltageArray(rawData, closestTimestamp);\n        // 2) Find which voltage closely coresponds to oldVoltage within this IV curve\n        const closestVoltage = await findClosestValue(voltageArray, oldVoltage);\n        // 3) Lookuptable based on those 2 values to find current\n        current = findCurrentNow(closestTimestamp, closestVoltage) * 15;\n        // 4) Calculate new voltage based on the current\n        newVoltage = calculateNewVoltage(oldVoltage, current, stepTime);\n\n        // Check If capacitor hits upper threshold\n        if (hasBeenMax === false && newVoltage >= upperThresholdVoltage) {\n            hasBeenMax = true;\n            const energy = calculateEnergy(newVoltage)\n            const usefulEnergy = energy - calculateEnergy(lowerThresholdVoltage);\n            const remainingUsefulEnergy = usefulEnergy - MNIST.initOverheadEnergy;\n            const totalRemainingEnergy = remainingUsefulEnergy + calculateEnergy(lowerThresholdVoltage);\n            newVoltage = calculateRemainingVoltage(totalRemainingEnergy)\n            bootTime = MNIST.time;\n            executedTasks = true;\n        }\n\n        if (hasBeenMax === true && newVoltage <= lowerThresholdVoltage) {\n            hasBeenMax = false;\n        }\n\n        // Execute if capacitor voltage is within upper and lower thresholds\n        if (newVoltage >= lowerThresholdVoltage && hasBeenMax === true) {\n            const energy = calculateEnergy(newVoltage);\n            const usefulEnergy = energy - calculateEnergy(lowerThresholdVoltage);\n            const remainingUsefulEnergy = executeTasks(usefulEnergy);\n            const totalRemainingEnergy = remainingUsefulEnergy + calculateEnergy(lowerThresholdVoltage);\n            oldVoltage = calculateRemainingVoltage(totalRemainingEnergy);\n            executedTasks = true;\n        } else {\n            stepTime = 0.01;\n            oldVoltage = newVoltage;\n            executedTasks = false;\n            taskCount = 0;\n        }\n\n        // Increments simulation time\n        simulationTime = simulationTime + stepTime + bootTime;\n\n        // Increments on/off time\n        if (executedTasks) {\n            onTime = onTime + ((stepTime + bootTime) * 1000);\n        } else {\n            offTime = offTime + (stepTime * 1000);\n        }\n        appCompletionTime = onTime + offTime;\n\n        // Handles App Completions\n        if (appCompleted) {\n            appCompletions = appCompletions + 1;\n            appCompleted = false;\n\n            // Push elements to the buffer\n            s_onTime.unshift(onTime);\n            s_onTime.pop();\n            s_offTime.unshift(offTime);\n            s_offTime.pop();\n            s_appCompTime.unshift(appCompletionTime);\n            s_appCompTime.pop();\n            s_taskCount.unshift(taskCount);\n            s_taskCount.pop();\n            s_pFC.unshift(powerFailureCount);\n            s_pFC.pop();\n            console.log(\"onTime\", s_onTime);\n            console.log(\"offTime\", s_offTime);\n            console.log(\"app completion time\", s_appCompTime);\n            console.log(\"taskCount\", s_taskCount);\n            console.log(\"failure count\", s_pFC);\n            console.log(\"skip Rows\", adaptiveVariablesValues[\"skipRows\"]);\n            console.log(\"skip Columns\", adaptiveVariablesValues[\"skipColumns\"]);\n\n            // Averaging\n            avgOnTime = average(s_onTime.slice(1, histArraySize));\n            avgOffTime = average(s_offTime.slice(1, histArraySize));\n            avgAppCompletionTime = average(s_appCompTime.slice(1, histArraySize));\n            avgTaskCount = average(s_taskCount.slice(1, histArraySize));\n            avgpowerFailureCount = average(s_pFC.slice(1, histArraySize));\n\n            // Handles Graphical Display\n            findAccuracyNow();\n            if (adaptiveVariablesValues[\"skipColumns\"] !== 0 || adaptiveVariablesValues[\"skipRows\"] !== 0) {\n                accuracyReturn.push({ Accuracy: accuracyArray[accuracyArray.length - 1], Time: simulationTime, Adapted: true })\n            } else if (adaptiveVariablesValues[\"skipColumns\"] == 0 || adaptiveVariablesValues[\"skipRows\"] == 0) {\n                accuracyReturn.push({ Accuracy: accuracyArray[accuracyArray.length - 1], Time: simulationTime, Adapted: false })\n            }\n\n            // Adaptation\n\n            // const shouldAdaptUp = evaluatex(equation.adaptUp,\n            //     { s_onTime: s_onTime },\n            //     { avgOnTime: avgOnTime },\n            //     { s_offTime: s_offTime },\n            //     { avgOffTime: avgOffTime },\n            //     { s_appCompTime: s_appCompTime },\n            //     { avgAppCompletionTime: avgAppCompletionTime },\n            //     { s_taskCount: s_taskCount },\n            //     { s_taskCount: s_taskCount },\n            //     { avgTaskCount: avgTaskCount },\n            //     { s_pFC: s_pFC },\n            //     { avgpowerFailureCount: avgpowerFailureCount },\n            //     { latex: true }\n            // );\n\n            // const shouldAdaptDown = evaluatex(equation.adaptDown,\n            //     { s_onTime: s_onTime },\n            //     { avgOnTime: avgOnTime },\n            //     { s_offTime: s_offTime },\n            //     { avgOffTime: avgOffTime },\n            //     { s_appCompTime: s_appCompTime },\n            //     { avgAppCompletionTime: avgAppCompletionTime },\n            //     { s_taskCount: s_taskCount },\n            //     { s_taskCount: s_taskCount },\n            //     { avgTaskCount: avgTaskCount },\n            //     { s_pFC: s_pFC },\n            //     { avgpowerFailureCount: avgpowerFailureCount },\n            //     { latex: true }\n            // );\n\n            // if (shouldAdaptUp()) {\n            //     adaptDown();\n            // }\n            // else if (shouldAdaptDown()) {\n            //     adaptUp();\n            // }\n\n            // if (equation.term1 === \"onTimeHistory\") {\n            //     if (s_onTime[0] > avgOnTime) {\n            //         adaptDown();\n            //     }\n            //     else if (s_onTime[0] < avgOnTime) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // if (equation.term1 === \"offTimeHistory\") {\n            //     if (s_offTime[0] > avgOffTime) {\n            //         adaptDown();\n            //     }\n            //     else if (s_offTime[0] < avgOffTime) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // if (equation.term1 === \"appCompletionTimeHistory\") {\n            //     if (s_appCompTime[0] > 1000) { // this is checking milli-seconds\n            //         adaptDown();\n            //     }\n            //     else if (s_appCompTime[0] < avgAppCompletionTime) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // if (equation.term1 === \"taskCountHistory\") {\n            //     if (s_taskCount[0] < avgTaskCount) {\n            //         adaptDown();\n            //     }\n            //     else if (s_taskCount[0] > avgTaskCount) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // if (equation.term1 === \"powerFailureCountHistory\") {\n            //     if (s_pFC[0] > avgpowerFailureCount) {\n            //         adaptDown();\n            //     }\n            //     else if (s_pFC[0] < avgpowerFailureCount) {\n            //         adaptUp();\n            //     }\n            // }\n\n            // Reset adaptation signals\n            onTime = 0;\n            offTime = 0;\n            appCompletionTime = 0;\n            taskCount = 0;\n            powerFailureCount = 0;\n            currentTaskNumber = 0;\n            currentTaskIterationNumber = 0;\n            currentTask = configuration.tasks[currentTaskNumber];\n            console.log(\"app completions\", appCompletions);\n        }\n\n    }\n\n    // Cleanup\n\n    const mlAccuracy = handleMLAccuracy();\n    const roundedAccuracy = mlAccuracy.toFixed(2);\n    console.log(\"average accuracy of all classifications\", roundedAccuracy)\n    console.log(accuracyReturn)\n\n    // Return\n\n    return ({\n        appCompletions: appCompletions,\n        mlAccuracy: roundedAccuracy,\n        accuracyGraph: accuracyReturn\n    })\n\n}\n\nexport default Main","import File from '../misc/test.csv';\nimport csv2array from './CSVToArray';\n\nasync function Main() {\n\n    // Initial Values\n    let rawData;\n    let time = [];\n    let mpp = [];\n\n    // Handles CSV Data\n    async function getData() {\n        const response = await fetch(File);\n        const table = await response.text();\n        rawData = csv2array(table);\n    }\n\n    const findMaxPowerPoint = (input) => {\n        let i = 0;\n        let temp_time = [];\n        let voltage = [];\n        let current = [];\n        input.forEach((item, index, array) => {\n            temp_time.push(item[0]);\n            voltage.push(item[1]);\n            current.push(item[2]);\n            i = i + 1;\n            if (i === 512) {\n                time.push(Math.max.apply(Math, temp_time));\n                mpp.push(Math.max.apply(Math, dotProduct(zipArray(voltage, current))));\n                voltage = [];\n                current = [];\n                i = 0;\n            }\n        })\n    }\n\n    const zipArray = (array1, array2) => {\n        const zipArray = array1.map(function (e, i) {\n            return [e, array2[i]];\n        });\n        return zipArray;\n    }\n\n    const dotProduct = (array) => {\n        const dotProduct = array.map((item) => {\n            return [(item[0] * item[1])];\n        })\n        return dotProduct;\n    }\n\n    const formatData = (input) => {\n        const data = []\n        input.forEach((item, index, array) => {\n            data.push({ Time: item[0], Power: item[1]*1000 })\n        })\n        return data\n    }\n\n    // Script\n    await getData();\n    findMaxPowerPoint(rawData);\n    const data = zipArray(time, mpp);\n    const formattedData = formatData(data);\n    return formattedData;\n\n}\n\nexport default Main\n","import React, { PureComponent } from 'react';\nimport GraphScript from '../scripts/GraphScript'\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Label } from 'recharts';\n\nexport default class Example extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n        };\n        this.accuracy = props.extraData\n    }\n\n    componentDidMount() {\n        GraphScript().then((response) => { this.setState({ data: response }); console.log(response) })\n    }\n\n    render() {\n        return (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart\n                    width={500}\n                    height={300}\n                    data={this.state.data}\n                    margin={{\n                        top: 5,\n                        right: 0,\n                        left: 0,\n                        bottom: 10,\n                    }}\n                >\n                    <defs>\n                        <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#2AB06E\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#2AB06E\" stopOpacity={0.4} />\n                        </linearGradient>\n                        <linearGradient id=\"colorRv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#E33737\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#E33737\" stopOpacity={0.4} />\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"Time\" type=\"number\" domain={['dataMin', 'dataMax']} ticks={[15, 30, 45, 60]}>\n                        <Label value=\"Time\" offset={-5} position=\"insideBottom\" />\n                    </XAxis>\n                    <YAxis>\n                        <Label value=\"Power (mW)\" offset={0} position=\"middle\" angle={-90} />\n                    </YAxis>\n                    <YAxis yAxisId=\"right\" orientation=\"right\">\n                        <Label value=\"Accuracy (%)\" offset={0} position=\"middle\" angle={-90} />\n                    </YAxis>\n                    <Tooltip />\n                    <Legend verticalAlign=\"top\" height={36} />\n                    <Area type=\"monotone\" dataKey=\"Power\" stroke=\"#2AB06E\" fillOpacity={1} fill=\"url(#colorPv)\" activeDot={{ r: 2 }} />\n                    <Area type=\"monotone\" dataKey=\"Accuracy\" stroke=\"#E33737\" fillOpacity={1} fill=\"url(#colorRv)\" activeDot={{ r: 2 }} />\n                </AreaChart>\n            </ResponsiveContainer>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/Hawaii.c70d354d.png\";","import React, { useEffect, useState, useRef } from 'react';\nimport Graph from './components/Graph';\nimport Hawaii from './images/Hawaii.png';\nimport MNIST from './config/mnist.json';\nimport ReactFlow, { Controls, Background } from 'react-flow-renderer';\nimport SimulationScript from './scripts/SimulationScript';\n\nimport { Slider, IconButton, TextField, Button, FormControlLabel, Switch, Dialog, DialogActions, DialogTitle, CircularProgress } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { withStyles } from '@material-ui/core/styles';\nimport { BsGear } from \"react-icons/bs\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PropTypes from 'prop-types';\n\nimport 'katex/dist/katex.min.css';\nimport { BlockMath } from 'react-katex';\n\nfunction App() {\n\n  let elements = [];\n  const JSONdata = MNIST;\n  const [adaptationStrategy, setAdaptationStrategy] = useState(JSONdata.adaptationStrategy[0]);\n  const [tasks, setTasks] = useState(adaptationStrategy.tasks);\n  const [knobs, setKnobs] = useState(adaptationStrategy.adaptiveVariables);\n  const [flowChart, setFlowChart] = useState([]);\n\n  const [appCompletions, setAppCompletions] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [extraData, setExtraData] = useState([])\n\n  const [LaTeXEquation1, setLaTeXEquation1] = useState(String.raw`\\mathit{if}\\ (\\mathit{s\\_off}_{n} - \\epsilon) < \\frac{1}{n}\\sum_{i=1}^{n-1} \\mathit{s\\_off}_{i}`);\n  const [LaTeXEquation2, setLaTeXEquation2] = useState(String.raw`\\mathit{if}\\ (\\mathit{s\\_off}_{n} + \\epsilon) > \\frac{1}{n}\\sum_{i=1}^{n-1} \\mathit{s\\_off}_{i}`);\n\n  const [showModal, setShowModal] = useState(false);\n  const [showLoading, setShowLoading] = useState(false);\n  const [histArraySize, setHistArraySize] = useState(0);\n  const [stepSize, setStepSize] = useState(0);\n  let adapt = false;\n\n  useEffect(() => {\n    getElements();\n    setFlowChart(elements);\n  }, [])\n\n  // Initializes and Arranges Task Map\n  const getElements = async () => {\n    let x = 150;\n    let y = 50;\n    tasks.map((item, index, array) => {\n      if (index === 0) {\n        elements.push({\n          id: index + 1,\n          //type: 'input', // input node\n          data: { label: item.taskName },\n          position: { x: x + 500, y: y },\n          sourcePosition: 'right',\n          targetPosition: 'bottom',\n          style: { backgroundColor: '#E8E8FC', borderRadius: 10, padding: 40, fontSize: 9, fontWeight: 'bold' }\n        }, {\n          id: 'arrow' + index + 1,\n          type: 'default',\n          source: index + 1,\n          target: index + 2,\n          arrowHeadType: 'arrowclosed',\n          animated: true,\n          style: { stroke: '#ffffff', strokeWidth: 3 },\n        });\n      } else if (index + 1 === tasks.length) {\n        if (x === 150) x = 400;\n        else if (x === 400) x = 150;\n        y = y + 100;\n        elements.push({\n          id: index + 1,\n          //type: 'output', // input node\n          data: { label: item.taskName },\n          position: { x: x, y: y },\n          sourcePosition: 'right',\n          targetPosition: 'top',\n          style: { backgroundColor: '#E8E8FC', borderRadius: 10, padding: 40, fontSize: 9, fontWeight: 'bold' }\n        }, {\n          id: 'arrow' + index + 1,\n          type: 'default',\n          source: index + 1,\n          target: 1,\n          arrowHeadType: 'arrowclosed',\n          animated: true,\n          style: { stroke: '#ffffff', strokeWidth: 3 },\n        });\n      } else {\n        if (x === 150) x = 400;\n        else if (x === 400) x = 150;\n        y = y + 100;\n        elements.push({\n          id: index + 1,\n          data: { label: item.taskName },\n          position: { x: x, y: y },\n          sourcePosition: 'right',\n          targetPosition: 'top',\n          style: { backgroundColor: '#E8E8FC', borderRadius: 10, padding: 40, fontSize: 9, fontWeight: 'bold' }\n        }, {\n          id: 'arrow' + index + 1,\n          type: 'default',\n          source: index + 1,\n          target: index + 2,\n          arrowHeadType: 'arrowclosed',\n          animated: true,\n          style: { stroke: '#ffffff', strokeWidth: 3 },\n        })\n      }\n    })\n  }\n\n  // Initializes Custom Sliders\n  const iOSBoxShadow = \" 0px 2px 4px 0px #000000\";\n  function ValueLabelComponent(props) {\n    const { children, open, value } = props;\n    return (\n      <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n        {children}\n      </Tooltip>\n    );\n  }\n  ValueLabelComponent.propTypes = {\n    children: PropTypes.element.isRequired,\n    open: PropTypes.bool.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n  const PrettoSlider = withStyles({\n    root: {\n      color: '#0058FF',\n      height: 8,\n    },\n    thumb: {\n      height: 24,\n      width: 24,\n      backgroundColor: '#fff',\n      border: '2px solid currentColor',\n      marginTop: -10,\n      marginLeft: -12,\n      '&:focus, &:hover, &$active': {\n        boxShadow: 'inherit',\n      },\n    },\n    active: {},\n    valueLabel: {\n      left: 'calc(-50% + 4px)',\n    },\n    track: {\n      height: 8,\n      borderRadius: 8,\n    },\n    rail: {\n      height: 8,\n      borderRadius: 8,\n      backgroundColor: \"#000000\",\n      boxShadow: iOSBoxShadow,\n    },\n  })(Slider);\n\n  // Handles AdaptUp Equation Changes\n  const handleAdaptUp = (event) => {\n    console.log(event.target.value)\n    setLaTeXEquation1(String.raw`\\mathit{if}\\ ${event.target.value}`)\n  }\n\n  // Handles AdaptDown Equation Changes\n  const handleAdaptDown = (event) => {\n    console.log(event.target.value)\n    setLaTeXEquation2(String.raw`\\mathit{if}\\ ${event.target.value}`)\n  }\n\n  // Excecutes Simulation Script\n  const executeScript = () => {\n    const equation = { adaptUp: LaTeXEquation1, adaptDown: LaTeXEquation2 }\n    setShowModal(false);\n    setShowLoading(true);\n    console.log(histArraySize)\n    console.log(stepSize)\n    console.log(adapt)\n    SimulationScript(histArraySize, stepSize, \"onTimeHistory\", adapt).then((response) => {\n      console.log(response)\n      setAppCompletions(response.appCompletions);\n      setAccuracy(response.mlAccuracy);\n      setExtraData(response.accuracyGraph);\n      setShowLoading(false);\n    })\n  }\n\n  return (\n    <>\n\n      <div style={showLoading ? { pointerEvents: \"none\", opacity: \"0.5\" } : {}}>\n\n        {/* Task Map */}\n        <div style={{ flex: 1, position: 'absolute', width: '68%', height: '70%', left: 0, top: 0, backgroundColor: '#69AA83', boxShadow: \"inset 0px 0px 20px 0px #ffffff\" }}>\n          <ReactFlow elements={flowChart} arrowHeadColor={\"#ffffff\"}>\n            <Controls />\n            <Background\n              variant=\"dots\"\n              gap={16}\n              size={1}\n            />\n          </ReactFlow>\n        </div>\n\n        {/* Knobs */}\n        <div style={{ flex: 1, position: 'absolute', width: '32%', height: '70%', right: 0, top: 0 }}>\n          <div style={{ flex: 1, padding: 30, height: '93%' }}>\n            <div style={{ flex: 1, flexDirection: 'row', marginTop: 10 }}>\n              <div style={{ fontFamily: \"GemunuLibre-ExtraBold\", fontSize: 45, fontWeight: '600', textAlign: 'center' }}>Configuration</div>\n              <IconButton style={{ marginLeft: '90%', top: -45 }} onClick={() => setShowModal(!showModal)}>\n                <BsGear size={24} color='#7F8489' />\n              </IconButton>\n            </div>\n            <div style={{ justifyContent: 'center', alignItems: 'center', textAlign: 'center', fontSize: 25, fontFamily: \"GemunuLibre-SemiBold\", textDecoration: 'underline', marginBottom: '2%' }}>\n              Step 1: Adjust Knobs\n            </div>\n            <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={histArraySize} max={8} onChange={(event, value) => { setHistArraySize(value) }} onChangeCommitted={(event, value) => { setHistArraySize(value) }} />\n            <div style={{ flex: 1, fontFamily: \"GemunuLibre-Light\", fontSize: 20, textAlign: 'center', marginBottom: 25 }}>History Array Size</div>\n            <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" value={stepSize} max={8} onChange={(event, value) => { setStepSize(value) }} onChangeCommitted={(event, value) => { setStepSize(value) }} />\n            <div style={{ flex: 1, fontFamily: \"GemunuLibre-Light\", fontSize: 20, textAlign: 'center', marginBottom: 25 }}>Adaptation Step Size</div>\n            <div style={{ justifyContent: 'center', alignItems: 'center', textAlign: 'center', fontSize: 25, fontFamily: \"GemunuLibre-SemiBold\", textDecoration: 'underline', marginBottom: '2%', marginTop: '5%' }}>\n              Step 2: Enter Heuristic Equation\n            </div>\n            <div style={{ marginTop: '2%', borderWidth: 2, borderColor: \"#000\", borderStyle: 'solid', borderRadius: 5 }}>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 20, textAlign: 'center', fontWeight: 'bold', marginTop: '2%' }}>Adapt Up</div>\n              <BlockMath>{LaTeXEquation1}</BlockMath>\n              <div style={{ display: 'inline' }}>\n                <TextField label=\"Adapt Up\" variant=\"filled\" style={{ width: '100%' }} onChange={(event) => handleAdaptUp(event)}></TextField>\n              </div>\n            </div>\n            <div style={{ marginTop: '1%', borderWidth: 2, borderColor: \"#000\", borderStyle: 'solid', borderRadius: 5 }}>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 20, textAlign: 'center', fontWeight: 'bold', marginTop: '2%' }}>Adapt Down</div>\n              <BlockMath>{LaTeXEquation2}</BlockMath>\n              <div style={{ display: 'inline' }}>\n                <TextField label=\"Adapt Down\" variant=\"filled\" style={{ width: '100%' }} onChange={(event) => handleAdaptDown(event)}></TextField>\n              </div>\n            </div>\n            <div style={{ justifyContent: 'center', alignItems: 'center', textAlign: 'center', fontSize: 25, fontFamily: \"GemunuLibre-SemiBold\", textDecoration: 'underline', marginBottom: '2%', marginTop: '5%' }}>\n              Step 3: Check Adaptation and Run\n            </div>\n            <div style={{ flexDirection: 'row', marginLeft: '32%' }}>\n              <FormControlLabel\n                control={<Switch size={'medium'} color=\"primary\" onChange={() => adapt = !adapt} />}\n                label=\"Adapt\"\n              />\n              <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => executeScript()} >\n                Execute\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Statistics */}\n        <div style={{ flex: 1, position: 'absolute', width: '30%', height: '30%', right: 0, bottom: 0 }}>\n          <div style={{ flex: 1, padding: 30 }}>\n            <div style={{ flex: 1, fontFamily: \"GemunuLibre-ExtraBold\", fontSize: 45, textAlign: 'center' }}>Statistics</div>\n            <div style={{ flexDirection: 'row', marginTop: 70 }}>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 40, display: 'inline' }}>App Completions:</div>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 40, display: 'inline', marginLeft: '40%' }}>{appCompletions}</div>\n            </div>\n            <div style={{ flexDirection: 'row', marginTop: 70 }}>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 40, display: 'inline' }}>Accuracy:</div>\n              <div style={{ fontFamily: \"GemunuLibre-Light\", fontSize: 40, display: 'inline', marginLeft: '50%' }}>{accuracy}%</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Chart */}\n        <div style={{ flex: 1, position: 'absolute', width: '70%', height: '30%', left: 0, bottom: 0 }}>\n          <Graph data={extraData} />\n        </div>\n\n        {/* Modal */}\n        <Dialog open={showModal} onClose={() => setShowModal(false)} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">Settings</DialogTitle>\n          <DialogActions>\n            <Button onClick={() => setShowModal(false)} color=\"primary\">\n              Cancel\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n      </div >\n\n      {/* Loading */}\n      {/* {showLoading ?\n        <div style={{ position: 'absolute', left: '50%', top: '40%' }}>\n          <CircularProgress\n            size={300}\n          />\n        </div>\n        : null\n      } */}\n\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}